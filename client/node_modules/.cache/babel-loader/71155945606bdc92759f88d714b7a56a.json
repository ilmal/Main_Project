{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useStore } from \"react-redux\";\nimport { useState } from \"react\";\nimport { serverTimeInfo } from \"../../../redux/actions\";\nimport StartStop from \"./startStop\";\n\nconst timeUpdate = async reset => {\n  _s();\n\n  const store = useStore();\n  const [userData, setUserData] = useState(store.getState());\n  store.subscribe(() => {\n    setUserData(store.getState());\n  });\n  let timeReset = false; // checking if timeReset should be true\n\n  if (reset) {\n    timeReset = true;\n  }\n\n  await serverTimeInfo(store.dispatch, timeReset, userData.serverTime.timeOfReset); //  shutting down server if shutdown variable is true, and server is runnig\n\n  if (userData.serverTIME.serverShutDown && userData.serverPods.status === \"True\") {\n    StartStop(\"shutDown\");\n  }\n};\n\n_s(timeUpdate, \"eFW9BJtZu+NjadMgwFzGB8dKwIs=\", false, function () {\n  return [useStore];\n});\n\nexport default timeUpdate;","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/userHome/server/timeUpdate.jsx"],"names":["useStore","useState","serverTimeInfo","StartStop","timeUpdate","reset","store","userData","setUserData","getState","subscribe","timeReset","dispatch","serverTime","timeOfReset","serverTIME","serverShutDown","serverPods","status"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,MAAMC,UAAU,GAAG,MAAOC,KAAP,IAAiB;AAAA;;AAChC,QAAMC,KAAK,GAAGN,QAAQ,EAAtB;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACK,KAAK,CAACG,QAAN,EAAD,CAAxC;AAEAH,EAAAA,KAAK,CAACI,SAAN,CAAgB,MAAM;AAClBF,IAAAA,WAAW,CAACF,KAAK,CAACG,QAAN,EAAD,CAAX;AACH,GAFD;AAIA,MAAIE,SAAS,GAAG,KAAhB,CARgC,CAUhC;;AACA,MAAIN,KAAJ,EAAW;AACPM,IAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,QAAMT,cAAc,CAACI,KAAK,CAACM,QAAP,EAAiBD,SAAjB,EAA4BJ,QAAQ,CAACM,UAAT,CAAoBC,WAAhD,CAApB,CAdgC,CAgBhC;;AACA,MAAIP,QAAQ,CAACQ,UAAT,CAAoBC,cAApB,IAAsCT,QAAQ,CAACU,UAAT,CAAoBC,MAApB,KAA+B,MAAzE,EAAiF;AAC7Ef,IAAAA,SAAS,CAAC,UAAD,CAAT;AACH;AACJ,CApBD;;GAAMC,U;UACYJ,Q;;;AAqBlB,eAAeI,UAAf","sourcesContent":["import { useStore } from \"react-redux\"\nimport { useState } from \"react\"\nimport { serverTimeInfo } from \"../../../redux/actions\"\nimport StartStop from \"./startStop\";\n\n\nconst timeUpdate = async (reset) => {\n    const store = useStore()\n    const [userData, setUserData] = useState(store.getState())\n\n    store.subscribe(() => {\n        setUserData(store.getState())\n    })\n\n    let timeReset = false\n\n    // checking if timeReset should be true\n    if (reset) {\n        timeReset = true\n    }\n    await serverTimeInfo(store.dispatch, timeReset, userData.serverTime.timeOfReset)\n\n    //  shutting down server if shutdown variable is true, and server is runnig\n    if (userData.serverTIME.serverShutDown && userData.serverPods.status === \"True\") {\n        StartStop(\"shutDown\")\n    }\n}\n\nexport default timeUpdate"]},"metadata":{},"sourceType":"module"}