{"ast":null,"code":"import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\";\nimport store from \"../store\"; // see attached link: https://stackoverflow.com/questions/50924814/node-js-wait-for-multiple-async-calls-to-finish-before-continuing-in-code for sayn execution \n\nexport default _c2 = Promise.all([store.dispatch(checkUserAuth), store.dispatch(getQuaryParams), store.dispatch(productInfo), store.dispatch(getCookies)]).then(async () => {\n  if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") {\n    // cheking if user is logged in\n    await store.dispatch(fetchUserData);\n\n    if (store.getState().user.past_servers.length > 0) {\n      // cheking if user have/ had a server\n      Promise.all([store.dispatch(createMcConfig), store.dispatch(serverPodsInfo), store.dispatch(serverSVCInfo), store.dispatch(serverInfo)]);\n    }\n  }\n}).then(_c = () => {\n  console.log(\"data after fetch func: \", store.getState()); // check if loginReset is true, if case, resetting cookies\n\n  if (store.getState().resetLogin) {\n    const cookieKey = [\"loginAuth\", \"userID\"];\n    cookieKey.forEach(element => {\n      document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`;\n    });\n    store.dispatch({\n      type: \"AUTH_SUCCESS\",\n      payload: {\n        auth: store.getState().auth,\n        resetLogin: false\n      }\n    });\n  }\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$Promise.all([\\n    store.dispatch(checkUserAuth),\\n    store.dispatch(getQuaryParams),\\n    store.dispatch(productInfo),\\n    store.dispatch(getCookies),\\n]).then(async () => {\\n    if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \\\"\\\") { // cheking if user is logged in\\n        await store.dispatch(fetchUserData)\\n        if (store.getState().user.past_servers.length > 0) { // cheking if user have/ had a server\\n            Promise.all([\\n                store.dispatch(createMcConfig),\\n                store.dispatch(serverPodsInfo),\\n                store.dispatch(serverSVCInfo),\\n                store.dispatch(serverInfo)\\n            ])\\n        }\\n    }\\n}).then\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/loadBaseData.jsx"],"names":["fetchUserData","checkUserAuth","createMcConfig","serverPodsInfo","serverSVCInfo","serverInfo","getQuaryParams","getCookies","productInfo","store","Promise","all","dispatch","then","getState","cookies","userID","undefined","user","past_servers","length","console","log","resetLogin","cookieKey","forEach","element","document","cookie","type","payload","auth"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,aAAvE,EAAsFC,UAAtF,EAAkGC,cAAlG,EAAkHC,UAAlH,EAA8HC,WAA9H,QAAiJ,wBAAjJ;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;;AAEA,qBAAeC,OAAO,CAACC,GAAR,CAAY,CACvBF,KAAK,CAACG,QAAN,CAAeX,aAAf,CADuB,EAEvBQ,KAAK,CAACG,QAAN,CAAeN,cAAf,CAFuB,EAGvBG,KAAK,CAACG,QAAN,CAAeJ,WAAf,CAHuB,EAIvBC,KAAK,CAACG,QAAN,CAAeL,UAAf,CAJuB,CAAZ,EAKZM,IALY,CAKP,YAAY;AAChB,MAAIJ,KAAK,CAACK,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoCC,SAApC,IAAiDR,KAAK,CAACK,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoC,EAAzF,EAA6F;AAAE;AAC3F,UAAMP,KAAK,CAACG,QAAN,CAAeZ,aAAf,CAAN;;AACA,QAAIS,KAAK,CAACK,QAAN,GAAiBI,IAAjB,CAAsBC,YAAtB,CAAmCC,MAAnC,GAA4C,CAAhD,EAAmD;AAAE;AACjDV,MAAAA,OAAO,CAACC,GAAR,CAAY,CACRF,KAAK,CAACG,QAAN,CAAeV,cAAf,CADQ,EAERO,KAAK,CAACG,QAAN,CAAeT,cAAf,CAFQ,EAGRM,KAAK,CAACG,QAAN,CAAeR,aAAf,CAHQ,EAIRK,KAAK,CAACG,QAAN,CAAeP,UAAf,CAJQ,CAAZ;AAMH;AACJ;AACJ,CAjBc,EAiBZQ,IAjBY,MAiBP,MAAM;AACVQ,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCb,KAAK,CAACK,QAAN,EAAvC,EADU,CAGV;;AACA,MAAIL,KAAK,CAACK,QAAN,GAAiBS,UAArB,EAAiC;AAC7B,UAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,QAAd,CAAlB;AACAA,IAAAA,SAAS,CAACC,OAAV,CAAkBC,OAAO,IAAI;AACzBC,MAAAA,QAAQ,CAACC,MAAT,GAAmB,GAAEF,OAAQ,8CAA7B;AACH,KAFD;AAGAjB,IAAAA,KAAK,CAACG,QAAN,CAAe;AACXiB,MAAAA,IAAI,EAAE,cADK;AAEXC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAEtB,KAAK,CAACK,QAAN,GAAiBiB,IADlB;AAELR,QAAAA,UAAU,EAAE;AAFP;AAFE,KAAf;AAOH;AACJ,CAlCc,CAAf","sourcesContent":["import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\"\nimport store from \"../store\"\n\n// see attached link: https://stackoverflow.com/questions/50924814/node-js-wait-for-multiple-async-calls-to-finish-before-continuing-in-code for sayn execution \n\nexport default Promise.all([\n    store.dispatch(checkUserAuth),\n    store.dispatch(getQuaryParams),\n    store.dispatch(productInfo),\n    store.dispatch(getCookies),\n]).then(async () => {\n    if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") { // cheking if user is logged in\n        await store.dispatch(fetchUserData)\n        if (store.getState().user.past_servers.length > 0) { // cheking if user have/ had a server\n            Promise.all([\n                store.dispatch(createMcConfig),\n                store.dispatch(serverPodsInfo),\n                store.dispatch(serverSVCInfo),\n                store.dispatch(serverInfo)\n            ])\n        }\n    }\n}).then(() => {\n    console.log(\"data after fetch func: \", store.getState())\n\n    // check if loginReset is true, if case, resetting cookies\n    if (store.getState().resetLogin) {\n        const cookieKey = [\"loginAuth\", \"userID\"]\n        cookieKey.forEach(element => {\n            document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`\n        })\n        store.dispatch({\n            type: \"AUTH_SUCCESS\",\n            payload: {\n                auth: store.getState().auth,\n                resetLogin: false\n            }\n        })\n    }\n})\n\n"]},"metadata":{},"sourceType":"module"}