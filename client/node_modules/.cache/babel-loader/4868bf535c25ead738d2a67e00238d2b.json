{"ast":null,"code":"import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\";\nimport { store } from \"..\";\nexport default (async __callback => {\n  store.dispatch(checkUserAuth);\n  store.dispatch(getQuaryParams);\n  store.dispatch(productInfo);\n  await store.dispatch(getCookies);\n\n  if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") {\n    // cheking if user is logged in\n    await store.dispatch(fetchUserData);\n\n    if (store.getState().user.past_servers.length > 0) {\n      // cheking if user have/ had a server\n      store.dispatch(createMcConfig);\n      store.dispatch(serverPodsInfo);\n      store.dispatch(serverSVCInfo);\n      store.dispatch(serverInfo);\n    }\n  }\n\n  console.log(\"data after fetch func: \", store.getState()); // check if loginReset is true, if case, resetting cookies\n\n  if (store.getState().resetLogin) {\n    const cookieKey = [\"loginAuth\", \"userID\"];\n    cookieKey.forEach(element => {\n      document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`;\n    });\n    store.dispatch({\n      type: \"AUTH_SUCCESS\",\n      payload: {\n        auth: store.getState().auth,\n        resetLogin: false\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/loadBaseData.jsx"],"names":["fetchUserData","checkUserAuth","createMcConfig","serverPodsInfo","serverSVCInfo","serverInfo","getQuaryParams","getCookies","productInfo","store","__callback","dispatch","getState","cookies","userID","undefined","user","past_servers","length","console","log","resetLogin","cookieKey","forEach","element","document","cookie","type","payload","auth"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,aAAvE,EAAsFC,UAAtF,EAAkGC,cAAlG,EAAkHC,UAAlH,EAA8HC,WAA9H,QAAiJ,wBAAjJ;AACA,SAASC,KAAT,QAAsB,IAAtB;AAGA,gBAAe,MAAOC,UAAP,IAAsB;AACjCD,EAAAA,KAAK,CAACE,QAAN,CAAeV,aAAf;AACAQ,EAAAA,KAAK,CAACE,QAAN,CAAeL,cAAf;AACAG,EAAAA,KAAK,CAACE,QAAN,CAAeH,WAAf;AACA,QAAMC,KAAK,CAACE,QAAN,CAAeJ,UAAf,CAAN;;AACA,MAAIE,KAAK,CAACG,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoCC,SAApC,IAAiDN,KAAK,CAACG,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoC,EAAzF,EAA6F;AAAE;AAC3F,UAAML,KAAK,CAACE,QAAN,CAAeX,aAAf,CAAN;;AACA,QAAIS,KAAK,CAACG,QAAN,GAAiBI,IAAjB,CAAsBC,YAAtB,CAAmCC,MAAnC,GAA4C,CAAhD,EAAmD;AAAE;AACjDT,MAAAA,KAAK,CAACE,QAAN,CAAeT,cAAf;AACAO,MAAAA,KAAK,CAACE,QAAN,CAAeR,cAAf;AACAM,MAAAA,KAAK,CAACE,QAAN,CAAeP,aAAf;AACAK,MAAAA,KAAK,CAACE,QAAN,CAAeN,UAAf;AACH;AACJ;;AACDc,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCX,KAAK,CAACG,QAAN,EAAvC,EAdiC,CAgBjC;;AACA,MAAIH,KAAK,CAACG,QAAN,GAAiBS,UAArB,EAAiC;AAC7B,UAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,QAAd,CAAlB;AACAA,IAAAA,SAAS,CAACC,OAAV,CAAkBC,OAAO,IAAI;AACzBC,MAAAA,QAAQ,CAACC,MAAT,GAAmB,GAAEF,OAAQ,8CAA7B;AACH,KAFD;AAGAf,IAAAA,KAAK,CAACE,QAAN,CAAe;AACXgB,MAAAA,IAAI,EAAE,cADK;AAEXC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAEpB,KAAK,CAACG,QAAN,GAAiBiB,IADlB;AAELR,QAAAA,UAAU,EAAE;AAFP;AAFE,KAAf;AAOH;AAEJ,CA/BD","sourcesContent":["import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\"\nimport { store } from \"..\"\n\n\nexport default async (__callback) => {\n    store.dispatch(checkUserAuth)\n    store.dispatch(getQuaryParams)\n    store.dispatch(productInfo)\n    await store.dispatch(getCookies)\n    if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") { // cheking if user is logged in\n        await store.dispatch(fetchUserData)\n        if (store.getState().user.past_servers.length > 0) { // cheking if user have/ had a server\n            store.dispatch(createMcConfig)\n            store.dispatch(serverPodsInfo)\n            store.dispatch(serverSVCInfo)\n            store.dispatch(serverInfo)\n        }\n    }\n    console.log(\"data after fetch func: \", store.getState())\n\n    // check if loginReset is true, if case, resetting cookies\n    if (store.getState().resetLogin) {\n        const cookieKey = [\"loginAuth\", \"userID\"]\n        cookieKey.forEach(element => {\n            document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`\n        })\n        store.dispatch({\n            type: \"AUTH_SUCCESS\",\n            payload: {\n                auth: store.getState().auth,\n                resetLogin: false\n            }\n        })\n    }\n\n}"]},"metadata":{},"sourceType":"module"}