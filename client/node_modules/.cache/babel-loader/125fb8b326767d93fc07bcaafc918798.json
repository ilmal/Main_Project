{"ast":null,"code":"import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\";\nimport store from \"../store\"; // see attached link: https://stackoverflow.com/questions/50924814/node-js-wait-for-multiple-async-calls-to-finish-before-continuing-in-code for sayn execution \n\nexport default _c2 = Promise.all([store.dispatch(checkUserAuth), store.dispatch(getQuaryParams), store.dispatch(productInfo), store.dispatch(getCookies), console.log(\"1\")]).then(_c = async () => {\n  console.log(\"2\");\n\n  if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") {\n    // cheking if user is logged in\n    await store.dispatch(fetchUserData);\n\n    if (store.getState().user.past_servers.length > 0) {\n      // cheking if user have/ had a server\n      Promise.all([store.dispatch(createMcConfig), store.dispatch(serverPodsInfo), store.dispatch(serverSVCInfo), store.dispatch(serverInfo)]).then(() => {\n        console.log(\"data after fetch func: \", store.getState()); // check if loginReset is true, if case, resetting cookies\n\n        if (store.getState().resetLogin) {\n          const cookieKey = [\"loginAuth\", \"userID\"];\n          cookieKey.forEach(element => {\n            document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`;\n          });\n          store.dispatch({\n            type: \"AUTH_SUCCESS\",\n            payload: {\n              auth: store.getState().auth,\n              resetLogin: false\n            }\n          });\n        }\n      });\n    }\n  }\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$Promise.all([\\n    store.dispatch(checkUserAuth),\\n    store.dispatch(getQuaryParams),\\n    store.dispatch(productInfo),\\n    store.dispatch(getCookies),\\n    console.log(\\\"1\\\")\\n]).then\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/loadBaseData.jsx"],"names":["fetchUserData","checkUserAuth","createMcConfig","serverPodsInfo","serverSVCInfo","serverInfo","getQuaryParams","getCookies","productInfo","store","Promise","all","dispatch","console","log","then","getState","cookies","userID","undefined","user","past_servers","length","resetLogin","cookieKey","forEach","element","document","cookie","type","payload","auth"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,aAAvE,EAAsFC,UAAtF,EAAkGC,cAAlG,EAAkHC,UAAlH,EAA8HC,WAA9H,QAAiJ,wBAAjJ;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;;AAEA,qBAAeC,OAAO,CAACC,GAAR,CAAY,CACvBF,KAAK,CAACG,QAAN,CAAeX,aAAf,CADuB,EAEvBQ,KAAK,CAACG,QAAN,CAAeN,cAAf,CAFuB,EAGvBG,KAAK,CAACG,QAAN,CAAeJ,WAAf,CAHuB,EAIvBC,KAAK,CAACG,QAAN,CAAeL,UAAf,CAJuB,EAKvBM,OAAO,CAACC,GAAR,CAAY,GAAZ,CALuB,CAAZ,EAMZC,IANY,MAMP,YAAY;AAChBF,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,MAAIL,KAAK,CAACO,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoCC,SAApC,IAAiDV,KAAK,CAACO,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoC,EAAzF,EAA6F;AAAE;AAC3F,UAAMT,KAAK,CAACG,QAAN,CAAeZ,aAAf,CAAN;;AACA,QAAIS,KAAK,CAACO,QAAN,GAAiBI,IAAjB,CAAsBC,YAAtB,CAAmCC,MAAnC,GAA4C,CAAhD,EAAmD;AAAE;AACjDZ,MAAAA,OAAO,CAACC,GAAR,CAAY,CACRF,KAAK,CAACG,QAAN,CAAeV,cAAf,CADQ,EAERO,KAAK,CAACG,QAAN,CAAeT,cAAf,CAFQ,EAGRM,KAAK,CAACG,QAAN,CAAeR,aAAf,CAHQ,EAIRK,KAAK,CAACG,QAAN,CAAeP,UAAf,CAJQ,CAAZ,EAKGU,IALH,CAKQ,MAAM;AACVF,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCL,KAAK,CAACO,QAAN,EAAvC,EADU,CAGV;;AACA,YAAIP,KAAK,CAACO,QAAN,GAAiBO,UAArB,EAAiC;AAC7B,gBAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,QAAd,CAAlB;AACAA,UAAAA,SAAS,CAACC,OAAV,CAAkBC,OAAO,IAAI;AACzBC,YAAAA,QAAQ,CAACC,MAAT,GAAmB,GAAEF,OAAQ,8CAA7B;AACH,WAFD;AAGAjB,UAAAA,KAAK,CAACG,QAAN,CAAe;AACXiB,YAAAA,IAAI,EAAE,cADK;AAEXC,YAAAA,OAAO,EAAE;AACLC,cAAAA,IAAI,EAAEtB,KAAK,CAACO,QAAN,GAAiBe,IADlB;AAELR,cAAAA,UAAU,EAAE;AAFP;AAFE,WAAf;AAOH;AACJ,OAtBD;AAuBH;AACJ;AACJ,CApCc,CAAf","sourcesContent":["import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\"\nimport store from \"../store\"\n\n// see attached link: https://stackoverflow.com/questions/50924814/node-js-wait-for-multiple-async-calls-to-finish-before-continuing-in-code for sayn execution \n\nexport default Promise.all([\n    store.dispatch(checkUserAuth),\n    store.dispatch(getQuaryParams),\n    store.dispatch(productInfo),\n    store.dispatch(getCookies),\n    console.log(\"1\")\n]).then(async () => {\n    console.log(\"2\")\n    if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") { // cheking if user is logged in\n        await store.dispatch(fetchUserData)\n        if (store.getState().user.past_servers.length > 0) { // cheking if user have/ had a server\n            Promise.all([\n                store.dispatch(createMcConfig),\n                store.dispatch(serverPodsInfo),\n                store.dispatch(serverSVCInfo),\n                store.dispatch(serverInfo)\n            ]).then(() => {\n                console.log(\"data after fetch func: \", store.getState())\n\n                // check if loginReset is true, if case, resetting cookies\n                if (store.getState().resetLogin) {\n                    const cookieKey = [\"loginAuth\", \"userID\"]\n                    cookieKey.forEach(element => {\n                        document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`\n                    })\n                    store.dispatch({\n                        type: \"AUTH_SUCCESS\",\n                        payload: {\n                            auth: store.getState().auth,\n                            resetLogin: false\n                        }\n                    })\n                }\n            })\n        }\n    }\n})\n\n"]},"metadata":{},"sourceType":"module"}