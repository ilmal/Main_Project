{"ast":null,"code":"import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\";\nimport store from \"../store\"; // see attached link: https://stackoverflow.com/questions/50924814/node-js-wait-for-multiple-async-calls-to-finish-before-continuing-in-code for sayn execution \n\nconst basicReq = () => {\n  store.dispatch(checkUserAuth);\n  store.dispatch(getQuaryParams);\n  store.dispatch(productInfo);\n  store.dispatch(getCookies);\n  console.log(\"1\");\n};\n\nconst userReq = () => {\n  store.dispatch(createMcConfig);\n  store.dispatch(serverPodsInfo);\n  store.dispatch(serverSVCInfo);\n  store.dispatch(serverInfo);\n  console.log(\"4\");\n};\n\nexport default (async () => {\n  var _store$getState, _store$getState$user, _store$getState$user$;\n\n  await Promise.all([store.dispatch(checkUserAuth), store.dispatch(getQuaryParams), store.dispatch(productInfo), store.dispatch(getCookies)]);\n  console.log(\"2\");\n  if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID === \"\") return; // cheking if user is logged in\n\n  await store.dispatch(fetchUserData);\n  console.log(\"3\");\n  if (((_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$user = _store$getState.user) === null || _store$getState$user === void 0 ? void 0 : (_store$getState$user$ = _store$getState$user.past_servers) === null || _store$getState$user$ === void 0 ? void 0 : _store$getState$user$.length) <= 0) return; // cheking if user have/ had a server\n\n  await Promise.all([store.dispatch(createMcConfig), store.dispatch(serverPodsInfo), store.dispatch(serverSVCInfo), store.dispatch(serverInfo)]);\n  console.log(\"5\");\n  console.log(\"data after fetch func: \", store.getState()); // check if loginReset is true, if case, resetting cookies\n\n  if (store.getState().resetLogin) {\n    const cookieKey = [\"loginAuth\", \"userID\"];\n    cookieKey.forEach(element => {\n      document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`;\n    });\n    store.dispatch({\n      type: \"AUTH_SUCCESS\",\n      payload: {\n        auth: store.getState().auth,\n        resetLogin: false\n      }\n    });\n  }\n}); // export default Promise.all([\n// ]).then(async () => {\n//     console.log(\"2\")\n//     if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") { // cheking if user is logged in\n//         await store.dispatch(fetchUserData)\n//         if (store.getState().user.past_servers.length > 0) { // cheking if user have/ had a server\n//             Promise.all([\n//             ]).then(() => {\n//             })\n//         }\n//     }\n// })","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/loadBaseData.jsx"],"names":["fetchUserData","checkUserAuth","createMcConfig","serverPodsInfo","serverSVCInfo","serverInfo","getQuaryParams","getCookies","productInfo","store","basicReq","dispatch","console","log","userReq","Promise","all","getState","cookies","userID","undefined","user","past_servers","length","resetLogin","cookieKey","forEach","element","document","cookie","type","payload","auth"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,aAAvE,EAAsFC,UAAtF,EAAkGC,cAAlG,EAAkHC,UAAlH,EAA8HC,WAA9H,QAAiJ,wBAAjJ;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnBD,EAAAA,KAAK,CAACE,QAAN,CAAeV,aAAf;AACAQ,EAAAA,KAAK,CAACE,QAAN,CAAeL,cAAf;AACAG,EAAAA,KAAK,CAACE,QAAN,CAAeH,WAAf;AACAC,EAAAA,KAAK,CAACE,QAAN,CAAeJ,UAAf;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACH,CAND;;AASA,MAAMC,OAAO,GAAG,MAAM;AAClBL,EAAAA,KAAK,CAACE,QAAN,CAAeT,cAAf;AACAO,EAAAA,KAAK,CAACE,QAAN,CAAeR,cAAf;AACAM,EAAAA,KAAK,CAACE,QAAN,CAAeP,aAAf;AACAK,EAAAA,KAAK,CAACE,QAAN,CAAeN,UAAf;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACH,CAND;;AASA,gBAAe,YAAY;AAAA;;AACvB,QAAME,OAAO,CAACC,GAAR,CAAY,CACdP,KAAK,CAACE,QAAN,CAAeV,aAAf,CADc,EAEdQ,KAAK,CAACE,QAAN,CAAeL,cAAf,CAFc,EAGdG,KAAK,CAACE,QAAN,CAAeH,WAAf,CAHc,EAIdC,KAAK,CAACE,QAAN,CAAeJ,UAAf,CAJc,CAAZ,CAAN;AAMAK,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEA,MAAIJ,KAAK,CAACQ,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoCC,SAApC,IAAiDX,KAAK,CAACQ,QAAN,GAAiBC,OAAjB,CAAyBC,MAAzB,KAAoC,EAAzF,EAA6F,OATtE,CAS8E;;AAErG,QAAMV,KAAK,CAACE,QAAN,CAAeX,aAAf,CAAN;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEA,MAAI,oBAAAJ,KAAK,CAACQ,QAAN,8FAAkBI,IAAlB,uGAAwBC,YAAxB,gFAAsCC,MAAtC,KAAgD,CAApD,EAAuD,OAfhC,CAewC;;AAE/D,QAAMR,OAAO,CAACC,GAAR,CAAY,CACdP,KAAK,CAACE,QAAN,CAAeT,cAAf,CADc,EAEdO,KAAK,CAACE,QAAN,CAAeR,cAAf,CAFc,EAGdM,KAAK,CAACE,QAAN,CAAeP,aAAf,CAHc,EAIdK,KAAK,CAACE,QAAN,CAAeN,UAAf,CAJc,CAAZ,CAAN;AAMAO,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEAD,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,KAAK,CAACQ,QAAN,EAAvC,EAzBuB,CA2BvB;;AACA,MAAIR,KAAK,CAACQ,QAAN,GAAiBO,UAArB,EAAiC;AAC7B,UAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,QAAd,CAAlB;AACAA,IAAAA,SAAS,CAACC,OAAV,CAAkBC,OAAO,IAAI;AACzBC,MAAAA,QAAQ,CAACC,MAAT,GAAmB,GAAEF,OAAQ,8CAA7B;AACH,KAFD;AAGAlB,IAAAA,KAAK,CAACE,QAAN,CAAe;AACXmB,MAAAA,IAAI,EAAE,cADK;AAEXC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAEvB,KAAK,CAACQ,QAAN,GAAiBe,IADlB;AAELR,QAAAA,UAAU,EAAE;AAFP;AAFE,KAAf;AAOH;AACJ,CAzCD,E,CAiDA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA","sourcesContent":["import { fetchUserData, checkUserAuth, createMcConfig, serverPodsInfo, serverSVCInfo, serverInfo, getQuaryParams, getCookies, productInfo } from \"../redux/actions/index\"\nimport store from \"../store\"\n\n// see attached link: https://stackoverflow.com/questions/50924814/node-js-wait-for-multiple-async-calls-to-finish-before-continuing-in-code for sayn execution \n\nconst basicReq = () => {\n    store.dispatch(checkUserAuth)\n    store.dispatch(getQuaryParams)\n    store.dispatch(productInfo)\n    store.dispatch(getCookies)\n    console.log(\"1\")\n}\n\n\nconst userReq = () => {\n    store.dispatch(createMcConfig)\n    store.dispatch(serverPodsInfo)\n    store.dispatch(serverSVCInfo)\n    store.dispatch(serverInfo)\n    console.log(\"4\")\n}\n\n\nexport default async () => {\n    await Promise.all([\n        store.dispatch(checkUserAuth),\n        store.dispatch(getQuaryParams),\n        store.dispatch(productInfo),\n        store.dispatch(getCookies)\n    ])\n    console.log(\"2\")\n\n    if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID === \"\") return  // cheking if user is logged in\n\n    await store.dispatch(fetchUserData)\n\n    console.log(\"3\")\n\n    if (store.getState()?.user?.past_servers?.length <= 0) return  // cheking if user have/ had a server\n\n    await Promise.all([\n        store.dispatch(createMcConfig),\n        store.dispatch(serverPodsInfo),\n        store.dispatch(serverSVCInfo),\n        store.dispatch(serverInfo)\n    ])\n    console.log(\"5\")\n\n    console.log(\"data after fetch func: \", store.getState())\n\n    // check if loginReset is true, if case, resetting cookies\n    if (store.getState().resetLogin) {\n        const cookieKey = [\"loginAuth\", \"userID\"]\n        cookieKey.forEach(element => {\n            document.cookie = `${element}=;path=/;expires=Thu, 01 Jan 1970T00:00:00Z;`\n        })\n        store.dispatch({\n            type: \"AUTH_SUCCESS\",\n            payload: {\n                auth: store.getState().auth,\n                resetLogin: false\n            }\n        })\n    }\n}\n\n\n\n\n\n\n\n// export default Promise.all([\n\n// ]).then(async () => {\n//     console.log(\"2\")\n//     if (store.getState().cookies.userID !== undefined && store.getState().cookies.userID !== \"\") { // cheking if user is logged in\n//         await store.dispatch(fetchUserData)\n//         if (store.getState().user.past_servers.length > 0) { // cheking if user have/ had a server\n//             Promise.all([\n\n//             ]).then(() => {\n\n//             })\n//         }\n//     }\n// })\n\n"]},"metadata":{},"sourceType":"module"}