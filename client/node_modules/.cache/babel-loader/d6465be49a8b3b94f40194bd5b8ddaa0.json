{"ast":null,"code":"import { serverTimeInfo } from \"../../../redux/actions\";\nimport StartStop from \"./startStop\";\n\nconst TimeUpdate = async (timeReset, store, userData) => {\n  await serverTimeInfo(store.dispatch, timeReset, userData.serverTIME.timeOfReset); // setting time left to 0 if server is not runnig and time still hasn't run out\n\n  if (userData.serverPods.status === \"server not running\" && userData.serverTIME.timeLeft > 0) {\n    console.log(\"reseting time to 0\");\n    store.dispatch({\n      \"type\": \"SERVER_TIME_DATA\",\n      \"payload\": {\n        timeLeft: 0\n      }\n    });\n  } //  shutting down server if shutdown variable is true, and server is runnig\n\n\n  if (userData.serverTIME.serverShutDown && userData.serverPods.status === \"True\") {\n    StartStop(\"stopServer\", store);\n  }\n};\n\n_c = TimeUpdate;\nexport default TimeUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeUpdate\");","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/userHome/server/timeUpdate.jsx"],"names":["serverTimeInfo","StartStop","TimeUpdate","timeReset","store","userData","dispatch","serverTIME","timeOfReset","serverPods","status","timeLeft","console","log","serverShutDown"],"mappings":"AAAA,SAASA,cAAT,QAA+B,wBAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,MAAMC,UAAU,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,QAAzB,KAAsC;AAErD,QAAML,cAAc,CAACI,KAAK,CAACE,QAAP,EAAiBH,SAAjB,EAA4BE,QAAQ,CAACE,UAAT,CAAoBC,WAAhD,CAApB,CAFqD,CAIrD;;AACA,MAAIH,QAAQ,CAACI,UAAT,CAAoBC,MAApB,KAA+B,oBAA/B,IAAuDL,QAAQ,CAACE,UAAT,CAAoBI,QAApB,GAA+B,CAA1F,EAA6F;AACzFC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAT,IAAAA,KAAK,CAACE,QAAN,CAAe;AACX,cAAQ,kBADG;AAEX,iBAAW;AACPK,QAAAA,QAAQ,EAAE;AADH;AAFA,KAAf;AAMH,GAboD,CAerD;;;AACA,MAAIN,QAAQ,CAACE,UAAT,CAAoBO,cAApB,IAAsCT,QAAQ,CAACI,UAAT,CAAoBC,MAApB,KAA+B,MAAzE,EAAiF;AAC7ET,IAAAA,SAAS,CAAC,YAAD,EAAeG,KAAf,CAAT;AACH;AACJ,CAnBD;;KAAMF,U;AAqBN,eAAeA,UAAf","sourcesContent":["import { serverTimeInfo } from \"../../../redux/actions\"\nimport StartStop from \"./startStop\";\n\n\nconst TimeUpdate = async (timeReset, store, userData) => {\n\n    await serverTimeInfo(store.dispatch, timeReset, userData.serverTIME.timeOfReset)\n\n    // setting time left to 0 if server is not runnig and time still hasn't run out\n    if (userData.serverPods.status === \"server not running\" && userData.serverTIME.timeLeft > 0) {\n        console.log(\"reseting time to 0\")\n        store.dispatch({\n            \"type\": \"SERVER_TIME_DATA\",\n            \"payload\": {\n                timeLeft: 0\n            }\n        })\n    }\n\n    //  shutting down server if shutdown variable is true, and server is runnig\n    if (userData.serverTIME.serverShutDown && userData.serverPods.status === \"True\") {\n        StartStop(\"stopServer\", store)\n    }\n}\n\nexport default TimeUpdate"]},"metadata":{},"sourceType":"module"}