{"ast":null,"code":"var _jsxFileName = \"/home/main-pc/programing/main_Project/client/src/pages/userHome.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport SideMenu from \"../components/userHome/sideMenu\";\nimport Server from \"../components/userHome/server\";\nimport Options from \"../components/userHome/options\";\nimport { store } from \"../index\";\nimport { StopServer } from \"../redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserHomePage = () => {\n  _s();\n\n  const history = useHistory();\n  const [didMount, setDidMount] = useState(false);\n  useEffect(() => {\n    // //autorefresh logs\n    // if (store.getState().serverPods.status != \"server not running\") {\n    //   setTimeout(() => {\n    //     store.dispatch(serverPodsInfo)\n    //     console.log(\"hello!\")\n    //     setRemount(!remount)\n    //   }, 50000);\n    // }\n    //adding userHomeData to redux store\n    store.dispatch({\n      type: \"USER_HOME_DATA\",\n      payload: {\n        serverIndex: 0,\n        sideMenuSelectedTab: \"server\"\n      }\n    }); // checking if user is logged in, if not redirecting to home page\n\n    if (store.getState().auth !== null && !store.getState().auth) {\n      console.log(\"Not logged in\");\n      history.push(\"/\");\n      window.location.reload();\n    }\n\n    setDidMount(true);\n    return () => setDidMount(false);\n  }, []);\n\n  const getPage = () => {\n    let component;\n\n    switch (store.getState().userHomeData.sideMenuSelectedTab) {\n      case \"server\":\n        component = /*#__PURE__*/_jsxDEV(Server, {\n          userData: store.getState()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this);\n        break;\n\n      case \"options\":\n        component = /*#__PURE__*/_jsxDEV(Options, {\n          userData: store.getState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this);\n        break;\n\n      default:\n        component = /*#__PURE__*/_jsxDEV(Server, {\n          userData: store.getState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this);\n        break;\n    }\n\n    return component;\n  }; //auth();\n\n\n  return /*#__PURE__*/_jsxDEV(\"dir\", {\n    className: \"userHomeLayout\",\n    id: \"random03242jcmvmj0v23cm4\",\n    children: [/*#__PURE__*/_jsxDEV(\"dir\", {\n      className: \"userHomesideMenu\",\n      children: /*#__PURE__*/_jsxDEV(SideMenu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), getPage()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserHomePage, \"x3xA5fXWCeAPVIeHLrr4K2v5ic0=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserHomePage;\nexport default UserHomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserHomePage\");","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/pages/userHome.jsx"],"names":["React","useState","useEffect","useHistory","SideMenu","Server","Options","store","StopServer","UserHomePage","history","didMount","setDidMount","dispatch","type","payload","serverIndex","sideMenuSelectedTab","getState","auth","console","log","push","window","location","reload","getPage","component","userHomeData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAK,IAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAE,gBADO;AAEbC,MAAAA,OAAO,EAAE;AACPC,QAAAA,WAAW,EAAE,CADN;AAEPC,QAAAA,mBAAmB,EAAE;AAFd;AAFI,KAAf,EAXc,CAmBd;;AACA,QAAIV,KAAK,CAACW,QAAN,GAAiBC,IAAjB,KAA0B,IAA1B,IAAkC,CAACZ,KAAK,CAACW,QAAN,GAAiBC,IAAxD,EAA8D;AAC5DC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAX,MAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AAEDb,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,WAAO,MAAMA,WAAW,CAAC,KAAD,CAAxB;AACD,GA5BQ,EA4BN,EA5BM,CAAT;;AA8BA,QAAMc,OAAO,GAAG,MAAM;AACpB,QAAIC,SAAJ;;AACA,YAAQpB,KAAK,CAACW,QAAN,GAAiBU,YAAjB,CAA8BX,mBAAtC;AACE,WAAK,QAAL;AACEU,QAAAA,SAAS,gBAAG,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEpB,KAAK,CAACW,QAAN;AAAlB;AAAA;AAAA;AAAA;AAAA,gBAAZ;AACA;;AACF,WAAK,SAAL;AACES,QAAAA,SAAS,gBAAG,QAAC,OAAD;AAAS,UAAA,QAAQ,EAAEpB,KAAK,CAACW;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAAZ;AACA;;AACF;AACES,QAAAA,SAAS,gBAAG,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEpB,KAAK,CAACW;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAAZ;AACA;AATJ;;AAWA,WAAOS,SAAP;AACD,GAdD,CAlCyB,CAkDzB;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAgC,IAAA,EAAE,EAAC,0BAAnC;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAIGD,OAAO,EAJV;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA3DD;;GAAMjB,Y;UACYN,U;;;KADZM,Y;AA6DN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport SideMenu from \"../components/userHome/sideMenu\";\nimport Server from \"../components/userHome/server\";\nimport Options from \"../components/userHome/options\";\n\nimport { store } from \"../index\";\nimport { StopServer } from \"../redux/actions\";\n\nconst UserHomePage = () => {\n  const history = useHistory();\n  const [didMount, setDidMount] = useState(false);\n\n  useEffect(() => {\n    // //autorefresh logs\n    // if (store.getState().serverPods.status != \"server not running\") {\n    //   setTimeout(() => {\n    //     store.dispatch(serverPodsInfo)\n    //     console.log(\"hello!\")\n    //     setRemount(!remount)\n    //   }, 50000);\n    // }\n\n    //adding userHomeData to redux store\n    store.dispatch({\n      type: \"USER_HOME_DATA\",\n      payload: {\n        serverIndex: 0,\n        sideMenuSelectedTab: \"server\"\n      }\n    })\n\n    // checking if user is logged in, if not redirecting to home page\n    if (store.getState().auth !== null && !store.getState().auth) {\n      console.log(\"Not logged in\");\n      history.push(\"/\");\n      window.location.reload();\n    }\n\n    setDidMount(true);\n    return () => setDidMount(false);\n  }, [])\n\n  const getPage = () => {\n    let component;\n    switch (store.getState().userHomeData.sideMenuSelectedTab) {\n      case \"server\":\n        component = <Server userData={store.getState()} />;\n        break;\n      case \"options\":\n        component = <Options userData={store.getState} />;\n        break;\n      default:\n        component = <Server userData={store.getState} />;\n        break;\n    }\n    return component;\n  };\n\n  //auth();\n  return (\n    <dir className=\"userHomeLayout\" id=\"random03242jcmvmj0v23cm4\">\n      <dir className=\"userHomesideMenu\">\n        <SideMenu />\n      </dir>\n      {getPage()}\n    </dir>\n  );\n};\n\nexport default UserHomePage;\n"]},"metadata":{},"sourceType":"module"}