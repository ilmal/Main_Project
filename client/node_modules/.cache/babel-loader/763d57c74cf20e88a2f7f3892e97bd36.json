{"ast":null,"code":"var _jsxFileName = \"/home/main-pc/programing/main_Project/client/src/components/payments/paymentLoginSignup.jsx\",\n    _s = $RefreshSig$();\n\n// modules\nimport { useState } from \"react\"; // redux\n\nimport store from \"../../store\";\nimport { signup, login } from \"../../redux/actions/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst usePaymentLoginSignupFunc = () => {\n  _s();\n\n  const [showSignup, setShowSignup] = useState(true); // const [verifySignup, setVerifySignup] = useState(true)\n  // const [clientNoMail, setClientNoMail] = useState(false)   // NOT YET IMPLEMENTED SEE BELOW \n  // const [user, setUser] = useState({ email: \"loading\" })\n  // // updating store \n  // useEffect(() => {\n  //     if (store.getState().user != \"This user doesn't exist\") {  // NOT YET IMPLEMENTED SEE BELOW \n  //         setUser(store.getState().user)\n  //     }\n  // }, [])\n  // // enable disable scroll paymentHandler\n  // useEffect(() => {\n  //     if (verifySignup) return document.body.style.overflow = \"hidden\"    // NOT YET IMPLEMENTED SEE BELOW \n  //     return document.body.style.overflow = \"scroll\"\n  // }, [verifySignup])\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (showSignup) {\n      // if the request is from the signup page\n      // making sure the passwords match\n      if (e.target.pass1.value !== e.target.pass2.value) {\n        console.error(\"password do not match! Err at /payments/paymentLoginSignup.jsx\");\n        return store.dispatch({\n          type: \"ERR_MESSAGE\",\n          payload: \"The passwords do not match!\"\n        });\n      } // // generating a success message for the client\n      // store.dispatch({\n      //     type: \"MESSAGE\",\n      //     payload: \"Signup success!\"\n      // })\n      // sending the name, email, pass and store to the redux action\n\n\n      console.log(\"sending data\"); // // not yet implemented, see below\n      // // setting state for showing verify signup true\n      // setVerifySignup(true)\n\n      return signup(e.target.email.value.split(\"@\")[0], e.target.email.value, e.target.pass1.value, store.dispatch);\n    } // if the request is from the login page\n    // console.log(\"email: \", e.target.email.value)\n    // console.log(\"pass: \", e.target.pass.value)\n\n\n    return login(e.target.email.value, e.target.pass.value, store.dispatch);\n  };\n\n  const loginComponent = () => {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"paymentLoginMainContainer\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"paymentLoginSignupHeader\",\n        children: \"LOGIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paymentLoginSignupsHeaderSeperator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        className: \"paymentLoginEmail\",\n        type: \"text\",\n        placeholder: \"Name/Email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"pass\",\n        className: \"paymentLoginPassword\",\n        type: \"password\",\n        placeholder: \"Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paymentLoginSignupButtonLinkContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => setShowSignup(!showSignup),\n          children: \"Don't have an account? Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  };\n\n  const signupComponent = () => {\n    // commented out section is for email confirmation. This I didn't feel was necessary while yhe user verifies through payment\n    // // showing signup verification if state verifySignup is true\n    // if (verifySignup) return (\n    //     <div className=\"paymentVerificationSignupMainBody\">\n    //         <div className=\"paymentVerificationHeader\">\n    //             <span>Follow the link sent to <span> {user.email} </span> and verify you account!</span>\n    //         </div>\n    //         <div className=\"paymentVerificationNoMailLine\" />\n    //         {clientNoMail ?\n    //             <div className=\"paymentVerificationNoMail\">\n    //                 <button onClick={() => store.dispatch(resendConfirmationMail)}>Send another mail to {user.email}</button>\n    //             </div>\n    //             :\n    //             <div className=\"paymentVerificationLink\">\n    //                 <span onClick={() => setClientNoMail(true)}>Can't find the email?</span>\n    //             </div>\n    //         }\n    //     </div>\n    // )\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"paymentSignupMainContainer\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"paymentLoginSignupHeader\",\n        children: \"SIGNUP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paymentLoginSignupsHeaderSeperator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        className: \"paymentSignupEmail\",\n        type: \"email\",\n        placeholder: \"Email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"pass1\",\n        className: \"paymentSignupPassword1\",\n        type: \"password\",\n        placeholder: \"Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"pass2\",\n        className: \"paymentSignupPassword2\",\n        type: \"password\",\n        placeholder: \"Retype Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"paymentLoginSignupButtonLinkContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Signup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => setShowSignup(!showSignup),\n          children: \"Already have an account? Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  };\n\n  if (showSignup) return signupComponent();\n  return loginComponent();\n};\n\n_s(usePaymentLoginSignupFunc, \"+wTLuycBQjWwClFMmg2CPT0nhLE=\");\n\nexport default usePaymentLoginSignupFunc;","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/payments/paymentLoginSignup.jsx"],"names":["useState","store","signup","login","usePaymentLoginSignupFunc","showSignup","setShowSignup","handleSubmit","e","preventDefault","target","pass1","value","pass2","console","error","dispatch","type","payload","log","email","split","pass","loginComponent","signupComponent"],"mappings":"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","sourcesContent":["// modules\nimport { useState } from \"react\"\n\n// redux\nimport store from \"../../store\"\nimport { signup, login } from \"../../redux/actions/index\"\n\n\n\nconst usePaymentLoginSignupFunc = () => {\n\n    const [showSignup, setShowSignup] = useState(true)\n    // const [verifySignup, setVerifySignup] = useState(true)\n    // const [clientNoMail, setClientNoMail] = useState(false)   // NOT YET IMPLEMENTED SEE BELOW \n    // const [user, setUser] = useState({ email: \"loading\" })\n\n    // // updating store \n    // useEffect(() => {\n    //     if (store.getState().user != \"This user doesn't exist\") {  // NOT YET IMPLEMENTED SEE BELOW \n    //         setUser(store.getState().user)\n    //     }\n    // }, [])\n\n\n    // // enable disable scroll paymentHandler\n    // useEffect(() => {\n    //     if (verifySignup) return document.body.style.overflow = \"hidden\"    // NOT YET IMPLEMENTED SEE BELOW \n    //     return document.body.style.overflow = \"scroll\"\n    // }, [verifySignup])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (showSignup) {\n            // if the request is from the signup page\n\n            // making sure the passwords match\n            if (e.target.pass1.value !== e.target.pass2.value) {\n                console.error(\"password do not match! Err at /payments/paymentLoginSignup.jsx\")\n                return store.dispatch({\n                    type: \"ERR_MESSAGE\",\n                    payload: \"The passwords do not match!\"\n                })\n            }\n            // // generating a success message for the client\n            // store.dispatch({\n            //     type: \"MESSAGE\",\n            //     payload: \"Signup success!\"\n            // })\n\n            // sending the name, email, pass and store to the redux action\n            console.log(\"sending data\")\n\n            // // not yet implemented, see below\n            // // setting state for showing verify signup true\n            // setVerifySignup(true)\n\n            return signup(e.target.email.value.split(\"@\")[0], e.target.email.value, e.target.pass1.value, store.dispatch)\n        }\n        // if the request is from the login page\n        // console.log(\"email: \", e.target.email.value)\n        // console.log(\"pass: \", e.target.pass.value)\n\n        return login(e.target.email.value, e.target.pass.value, store.dispatch)\n    }\n\n    const loginComponent = () => {\n        return (\n            <form className=\"paymentLoginMainContainer\" onSubmit={handleSubmit}>\n                <span className=\"paymentLoginSignupHeader\">LOGIN</span>\n                <div className=\"paymentLoginSignupsHeaderSeperator\" />\n                <input name=\"email\" className=\"paymentLoginEmail\" type=\"text\" placeholder=\"Name/Email\" required />\n                <input name=\"pass\" className=\"paymentLoginPassword\" type=\"password\" placeholder=\"Password\" required />\n                <div className=\"paymentLoginSignupButtonLinkContainer\">\n                    <button>Login</button>\n                    <span onClick={() => setShowSignup(!showSignup)}>Don't have an account? Sign up</span>\n                </div>\n            </form>\n        )\n    }\n\n    const signupComponent = () => {\n\n        // commented out section is for email confirmation. This I didn't feel was necessary while yhe user verifies through payment\n\n        // // showing signup verification if state verifySignup is true\n        // if (verifySignup) return (\n        //     <div className=\"paymentVerificationSignupMainBody\">\n        //         <div className=\"paymentVerificationHeader\">\n        //             <span>Follow the link sent to <span> {user.email} </span> and verify you account!</span>\n        //         </div>\n        //         <div className=\"paymentVerificationNoMailLine\" />\n        //         {clientNoMail ?\n        //             <div className=\"paymentVerificationNoMail\">\n        //                 <button onClick={() => store.dispatch(resendConfirmationMail)}>Send another mail to {user.email}</button>\n        //             </div>\n        //             :\n        //             <div className=\"paymentVerificationLink\">\n        //                 <span onClick={() => setClientNoMail(true)}>Can't find the email?</span>\n        //             </div>\n        //         }\n        //     </div>\n        // )\n        return (\n            <form className=\"paymentSignupMainContainer\" onSubmit={handleSubmit}>\n                <span className=\"paymentLoginSignupHeader\">SIGNUP</span>\n                <div className=\"paymentLoginSignupsHeaderSeperator\" />\n                <input name=\"email\" className=\"paymentSignupEmail\" type=\"email\" placeholder=\"Email\" required />\n                <input name=\"pass1\" className=\"paymentSignupPassword1\" type=\"password\" placeholder=\"Password\" required />\n                <input name=\"pass2\" className=\"paymentSignupPassword2\" type=\"password\" placeholder=\"Retype Password\" required />\n                <div className=\"paymentLoginSignupButtonLinkContainer\">\n                    <button>Signup</button>\n                    <span onClick={() => setShowSignup(!showSignup)}>Already have an account? Login</span>\n                </div>\n            </form>\n        )\n    }\n\n    if (showSignup) return signupComponent();\n    return loginComponent();\n}\n\nexport default usePaymentLoginSignupFunc"]},"metadata":{},"sourceType":"module"}