{"ast":null,"code":"var _jsxFileName = \"/home/main-pc/programing/main_Project/client/src/components/userHome/server.jsx\",\n    _s = $RefreshSig$();\n\nimport ChangeServerConfig from \"./server/changeServerConfig\";\nimport LogsComponent from \"./server/logsComponent\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactTooltip from 'react-tooltip';\nimport { store } from \"../../index\";\nimport { serverPodsInfo, serverTimeInfo } from \"../../redux/actions\";\nimport refreshData from \"./server/refreshData\";\nimport StartStop from \"./server/startStop\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Server = () => {\n  _s();\n\n  const [userData, updateUserData] = useState(store.getState()); // states for the playTime\n\n  const [playtimeLeft, setPlaytimeLeft] = useState(0);\n  const [playTimeReset, setPlayTimeReset] = useState(false);\n  const history = useHistory();\n  store.subscribe(() => {\n    updateUserData(store.getState());\n  });\n  useEffect(() => {\n    // cheking if the time left function has been started, and displaying custom message (0) on no time left\n    let timeOfReset = null;\n    let timeLeft = 0;\n    let serverShutDown = false;\n\n    if (userData.serverTIME != null) {\n      timeOfReset = userData.serverTIME.timeOfReset;\n      timeLeft = userData.serverTIME.timeLeft;\n      serverShutDown = userData.serverTIME.serverShutDown;\n    } // refresh logs if status isn't \"server not running\"\n\n\n    if (store.getState().serverPods.status != \"server not running\") {\n      const interval = setInterval(() => {\n        store.dispatch(serverPodsInfo); // time req\n\n        serverTimeInfo(store.dispatch, playTimeReset, timeOfReset); // updating time and resetting the reset key\n\n        setPlaytimeLeft(timeLeft);\n\n        if (playTimeReset) {\n          setPlayTimeReset(false);\n        } // cheking if time has expired and server is running, shutting down server if case is true\n\n\n        if (serverShutDown && store.getState().serverPods.status) {\n          StartStop(\"shutdown\");\n        }\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [userData]);\n\n  const serverStatus = e => {\n    switch (userData.serverPods.status) {\n      case \"True\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"runningDiv defaultDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"running\",\n            children: \"Running\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 16\n        }, this);\n\n      case \"False\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"closingDiv defaultDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"closing\",\n            children: \"Shutting Down\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 16\n        }, this);\n\n      case \"Pending\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"closingDiv defaultDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"closing\",\n            children: \"Starting up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }, this);\n\n      case \"Queuing\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"closingDiv defaultDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"closing\",\n            children: \"Queuing for server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }, this);\n\n      case \"server not running\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"closedDiv defaultDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"closed\",\n            children: \"Not Running\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 16\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"closedDiv defaultDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"closed\",\n            children: \"ERROR OCCURED\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 16\n        }, this);\n    }\n  };\n\n  const serverIP = () => {\n    if (userData.serverPods.status !== \"server not running\") {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"mc.servers.u1.se:\", userData.serverSVC.port]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"----\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  const copyText = e => {\n    navigator.clipboard.writeText(e.target.innerText);\n  };\n\n  if (document.cookie.search(\"loginAuth\") > -1) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userHomeServerName\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: userData.env[4].value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userHomeSegment userHomeStatusOfServer\",\n        children: [serverStatus(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkStatus fas fa-sync\",\n          onClick: refreshData,\n          \"data-tip\": true,\n          \"data-for\": \"refreshInfo\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Check Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userHomeSegment suerhomeStartStopServer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"innerDivStart\",\n          onClick: StartStop,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"userHomestart\",\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"innerDivStop\",\n          onClick: StartStop,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"userHomestop\",\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"random23894723\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"userHomeLineBetweenStartStop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userHomeSegment userHomeIpAdress\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Server IP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          \"data-tip\": true,\n          \"data-for\": \"copyServerAddress\",\n          onClick: copyText,\n          children: serverIP()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChangeServerConfig, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LogsComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playtimeContainer userHomeSegment\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playtimeTitleContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Play time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playtimeInfoContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playtimeTimeContainer\",\n            \"data-tip\": true,\n            \"data-for\": \"playtimeleft\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"playtimetimetime\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: playtimeLeft\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"playtimetimedescription\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playtimeContainerLine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playtimeBtnContainer\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: refreshPlayTimeFunc,\n              children: \"Refresh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n        id: \"copyServerAddress\",\n        delayShow: \"100\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click to copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n        id: \"refreshInfo\",\n        place: \"bottom\",\n        delayShow: \"100\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click to refresh logs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n        id: \"expandLogs\",\n        place: \"bottom\",\n        delayShow: \"100\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click to expand/minimize logs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n        id: \"playtimeleft\",\n        place: \"top\",\n        delayShow: \"20\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"play time remaining\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    console.log(\"User no auth\");\n    history.push(\"/\");\n    return null;\n  }\n};\n\n_s(Server, \"hNcAwz7FFtsrwQ5Tf6WsxuGSR+k=\", false, function () {\n  return [useHistory];\n});\n\n_c = Server;\nexport default Server;\n\nvar _c;\n\n$RefreshReg$(_c, \"Server\");","map":{"version":3,"sources":["/home/main-pc/programing/main_Project/client/src/components/userHome/server.jsx"],"names":["ChangeServerConfig","LogsComponent","useState","useEffect","useHistory","ReactTooltip","store","serverPodsInfo","serverTimeInfo","refreshData","StartStop","Server","userData","updateUserData","getState","playtimeLeft","setPlaytimeLeft","playTimeReset","setPlayTimeReset","history","subscribe","timeOfReset","timeLeft","serverShutDown","serverTIME","serverPods","status","interval","setInterval","dispatch","clearInterval","serverStatus","e","serverIP","serverSVC","port","copyText","navigator","clipboard","writeText","target","innerText","document","cookie","search","env","value","refreshPlayTimeFunc","console","log","push"],"mappings":"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","sourcesContent":["import ChangeServerConfig from \"./server/changeServerConfig\";\nimport LogsComponent from \"./server/logsComponent\"\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactTooltip from 'react-tooltip';\n\nimport { store } from \"../../index\";\nimport { serverPodsInfo, serverTimeInfo } from \"../../redux/actions\"\n\nimport refreshData from \"./server/refreshData\";\nimport StartStop from \"./server/startStop\";\n\n\nconst Server = () => {\n  const [userData, updateUserData] = useState(store.getState());\n  // states for the playTime\n  const [playtimeLeft, setPlaytimeLeft] = useState(0)\n  const [playTimeReset, setPlayTimeReset] = useState(false)\n\n  const history = useHistory();\n\n  store.subscribe(() => {\n    updateUserData(store.getState());\n  });\n\n  useEffect(() => {\n    // cheking if the time left function has been started, and displaying custom message (0) on no time left\n    let timeOfReset = null\n    let timeLeft = 0\n    let serverShutDown = false\n    if (userData.serverTIME != null) {\n      timeOfReset = userData.serverTIME.timeOfReset\n      timeLeft = userData.serverTIME.timeLeft\n      serverShutDown = userData.serverTIME.serverShutDown\n    }\n\n    // refresh logs if status isn't \"server not running\"\n    if (store.getState().serverPods.status != \"server not running\") {\n      const interval = setInterval(() => {\n\n        store.dispatch(serverPodsInfo)\n\n        // time req\n        serverTimeInfo(store.dispatch, playTimeReset, timeOfReset)\n\n        // updating time and resetting the reset key\n        setPlaytimeLeft(timeLeft)\n        if (playTimeReset) {\n          setPlayTimeReset(false)\n        }\n\n        // cheking if time has expired and server is running, shutting down server if case is true\n        if (serverShutDown && store.getState().serverPods.status) {\n          StartStop(\"shutdown\")\n        }\n\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [userData])\n\n\n\n  const serverStatus = (e) => {\n    switch (userData.serverPods.status) {\n      case \"True\":\n        return <div className=\"runningDiv defaultDiv\"><p className=\"running\">Running</p></div>\n      case \"False\":\n        return <div className=\"closingDiv defaultDiv\"><p className=\"closing\">Shutting Down</p></div>\n      case \"Pending\":\n        return <div className=\"closingDiv defaultDiv\"><p className=\"closing\">Starting up</p></div>\n      case \"Queuing\":\n        return <div className=\"closingDiv defaultDiv\"><p className=\"closing\">Queuing for server</p></div>\n      case \"server not running\":\n        return <div className=\"closedDiv defaultDiv\"><p className=\"closed\">Not Running</p></div>\n      default:\n        return <div className=\"closedDiv defaultDiv\"><p className=\"closed\">ERROR OCCURED</p></div>\n    }\n  }\n  const serverIP = () => {\n    if (userData.serverPods.status !== \"server not running\") {\n      return <span>mc.servers.u1.se:{userData.serverSVC.port}</span>\n    } else {\n      return <span>----</span>\n    }\n  }\n\n  const copyText = (e) => {\n    navigator.clipboard.writeText(e.target.innerText)\n  }\n\n\n\n  if (document.cookie.search(\"loginAuth\") > -1) {\n    return (\n      <>\n        <div className=\"userHomeServerName\">\n          <span>{userData.env[4].value}</span>\n        </div>\n        <div className=\"userHomeSegment userHomeStatusOfServer\">\n          {serverStatus()}\n          <div className=\"checkStatus fas fa-sync\" onClick={refreshData} data-tip data-for=\"refreshInfo\">\n            <span>Check Status</span>\n          </div>\n        </div>\n        <div className=\"userHomeSegment suerhomeStartStopServer\">\n          <div className=\"innerDivStart\" onClick={StartStop}>\n            <span className=\"userHomestart\">Start</span>\n          </div>\n          <div className=\"innerDivStop\" onClick={StartStop}>\n            <span className=\"userHomestop\">Stop</span>\n          </div>\n          <div id=\"random23894723\">\n            <div className=\"userHomeLineBetweenStartStop\" />\n          </div>\n        </div>\n        <div className=\"userHomeSegment userHomeIpAdress\">\n          <p>Server IP:</p>\n          <span data-tip data-for=\"copyServerAddress\" onClick={copyText}>{serverIP()}</span>\n        </div>\n        <ChangeServerConfig />\n        <LogsComponent />\n        <div className=\"playtimeContainer userHomeSegment\">\n          <div className=\"playtimeTitleContainer\">\n            <span>Play time</span>\n          </div>\n          <div className=\"playtimeInfoContainer\">\n            <div className=\"playtimeTimeContainer\" data-tip data-for=\"playtimeleft\">\n              <div className=\"playtimetimetime\">\n                <span>{playtimeLeft}</span>\n              </div>\n              <div className=\"playtimetimedescription\">\n                <span>minutes</span>\n              </div>\n            </div>\n            <div className=\"playtimeContainerLine\" />\n            <div className=\"playtimeBtnContainer\">\n              <button onClick={refreshPlayTimeFunc}>Refresh</button>\n            </div>\n          </div>\n        </div>\n        <ReactTooltip id=\"copyServerAddress\" delayShow=\"100\">\n          <p>Click to copy</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"refreshInfo\" place=\"bottom\" delayShow=\"100\">\n          <p>Click to refresh logs</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"expandLogs\" place=\"bottom\" delayShow=\"100\">\n          <p>Click to expand/minimize logs</p>\n        </ReactTooltip>\n        <ReactTooltip id=\"playtimeleft\" place=\"top\" delayShow=\"20\">\n          <p>play time remaining</p>\n        </ReactTooltip>\n      </>\n    );\n  } else {\n    console.log(\"User no auth\")\n    history.push(\"/\");\n    return null;\n  }\n};\n\nexport default Server;\n"]},"metadata":{},"sourceType":"module"}